#!/bin/bash

# Usage: ./workshop-cherry-pick [commit] --start [start-branch] --end [end-branch]

set -e

# keep this array up to date with all the branches (in order)
ws=("workshop0-starter"
    "workshop0-step1"
    "workshop0-step2"
    "workshop0-step3"
    "workshop0-step4"
    "workshop0-step5"
    "workshop0-step6"
    "workshop0-step7"
    "workshop0-step8"
    "workshop0-step9"
    "workshop0-step10"
    "workshop0-step11"
    "workshop0-step12"
    "workshop0-step13"
    "workshop0-complete"
    "workshop1"
    "workshop1-final"
    "workshop2"
    "workshop2-starter"
    "workshop2-step1"
    "workshop2-step2"
    "workshop2-step3"
    "workshop2-step4"
    "workshop2-step5"
    "workshop2-step6"
    "workshop2-step7"
    "workshop2-step8"
    "workshop2-step9"
    "workshop2-complete"
    "workshop2-final"
    "workshop3-complete"
    "workshop3-final"
    "workshop4-starter"
    "workshop4-complete"
    "workshop5-starter"
    "workshop5-complete"
    "noauth"
   )

# use most recent commit if commit not specified
commit=$(git rev-parse HEAD)

# start on the first workshop if not specified
startbr=${ws[0]}

# no end branch by default
endbr=""

# iterate through script parameters
while [[ $# -gt 0 ]]
do
key="$1"

case $key in
    -s|--start)
    startbr="$2"
    shift # consume --start
    shift # consume value
    ;;
    -e|--end)
    endbr="$2"
    shift # consume --end
    shift # consume value
    ;;
    *)    # positional arg
    commit="$1"
    shift # consume value
    ;;
esac
done

message=$(git log -1 --pretty=%B $commit)

# if ws does not contain START
if [[ ! " ${ws[@]} " =~ " ${startbr} " ]]; then
    echo "ERROR: invalid branch $startbr"
    exit 1
fi

echo "cherry-picking commit $commit to all branches starting from $startbr"

origbranch=$(git symbolic-ref --short HEAD)
active=false
for branch in "${ws[@]}"; do
    if [ "$branch" == "$startbr" ]; then
        active=true
    fi

    $active || continue

    if [ "$branch" == "$endbr" ]; then
        active=false
    fi

    brstatus=$(git checkout $branch)

    # makes sure you actually have the must up-to-date branch
    if [[ "$brstatus" =~ "branch is behind" ]]; then
        echo "branch is behind, pulling"
        git pull
    fi
    
    # makes the script idempotent
    if [ "$message" == "$(git log -1 --pretty=%B)" ]; then
        echo "WARN: commit was already cherry-picked to this branch, skipping"
        echo "------------"
        continue
    fi

    # actually apply the cherry-pick here
    if git cherry-pick $commit ; then
        echo "success"
        echo "------------"
    else 
        echo "WARN: conflict encountered! please resolve this and re-run the script"
        exit 1
    fi 
done

git checkout $origbranch
echo "done"
